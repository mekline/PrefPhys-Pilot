moneyOwed = moneyOwed.x - moneyPaid,
earnedBonus = earnedBonus.x) %>%
select(-contains('.x')) %>%
select(-contains('.y')) %>%
select(username, moneyOwed, moneyPaid, child.firstName, email, everything())
View(new_summary2)
#And write out the updated payment tracker
write.csv(select(summary, username,	moneyOwed,	moneyPaid,	child.firstName,	email, numEarnedSessions, earnedBonus),"payment_tracker.csv")
summary <- allInfo %>%
mutate(isOver1 = nVideosFound > 1) %>%
mutate(nameIfNo = ifelse(coded == 'no', shortId, ''))%>%
group_by(username, child.firstName, email, okayToSend.personalCommunication) %>%
dplyr::summarize(numEarnedSessions = n(),
earnedBonus = numEarnedSessions > 11,
numOver1 = sum(isOver1, na.rm = TRUE),
numUnCodedSessions = sum(coded == 'no', na.rm = TRUE),
namesUnCodedSessions = paste0(nameIfNo, collapse = ', '),
numPaidSessions = 0,
paidBonus = FALSE) %>%
filter(numOver1 > 0) %>%
mutate(moneyOwed = (numEarnedSessions)*5 + earnedBonus*5) %>%
mutate(moneyPaid = (numPaidSessions)*5 + paidBonus*5) %>%
select(username, moneyOwed, moneyPaid, child.firstName, email, everything())
#Now read in the tracker sheet and see if anything needs updated! (IE have we paid anyone since running this script last?)
payment_tracker = read.csv("payment_tracker.csv", stringsAsFactors = FALSE) %>%
select(username, moneyOwed, moneyPaid, numEarnedSessions, earnedBonus)
new_summary <- left_join(summary, payment_tracker, by = 'username')
new_summary <- new_summary %>%
mutate(numPaidSessions = ifelse(moneyPaid.y > moneyPaid.x, numEarnedSessions.y, numPaidSessions)) %>%
mutate(paidBonus = ifelse((moneyPaid.y > moneyPaid.x & earnedBonus.y == TRUE), TRUE, paidBonus)) %>%
mutate(moneyPaid = moneyPaid.y) %>%
mutate(numEarnedSessions = numEarnedSessions.x,
moneyOwed = moneyOwed.x - moneyPaid,
earnedBonus = earnedBonus.x) %>%
select(-contains('.x')) %>%
select(-contains('.y')) %>%
select(username, moneyOwed, moneyPaid, child.firstName, email, everything())
#And write out the updated payment tracker
write.csv(select(new_summary, username,	moneyOwed,	moneyPaid,	child.firstName,	email, numEarnedSessions, earnedBonus),"payment_tracker.csv")
summary <- allInfo %>%
mutate(isOver1 = nVideosFound > 1) %>%
mutate(nameIfNo = ifelse(coded == 'no', shortId, ''))%>%
group_by(username, child.firstName, email, okayToSend.personalCommunication) %>%
dplyr::summarize(numEarnedSessions = n(),
earnedBonus = numEarnedSessions > 11,
numOver1 = sum(isOver1, na.rm = TRUE),
numUnCodedSessions = sum(coded == 'no', na.rm = TRUE),
namesUnCodedSessions = paste0(nameIfNo, collapse = ', '),
numPaidSessions = 0,
paidBonus = FALSE) %>%
filter(numOver1 > 0) %>%
mutate(moneyOwed = (numEarnedSessions)*5 + earnedBonus*5) %>%
mutate(moneyPaid = (numPaidSessions)*5 + paidBonus*5) %>%
select(username, moneyOwed, moneyPaid, child.firstName, email, everything())
#Now read in the tracker sheet and see if anything needs updated! (IE have we paid anyone since running this script last?)
payment_tracker = read.csv("payment_tracker.csv", stringsAsFactors = FALSE) %>%
select(username, moneyOwed, moneyPaid, numEarnedSessions, earnedBonus)
new_summary <- left_join(summary, payment_tracker, by = 'username')
new_summary <- new_summary %>%
mutate(numPaidSessions = ifelse(moneyPaid.y > moneyPaid.x, numEarnedSessions.y, numPaidSessions)) %>%
mutate(paidBonus = ifelse((moneyPaid.y > moneyPaid.x & earnedBonus.y == TRUE), TRUE, paidBonus)) %>%
mutate(moneyPaid = moneyPaid.y) %>%
mutate(numEarnedSessions = numEarnedSessions.x,
moneyOwed = moneyOwed.x - moneyPaid,
earnedBonus = earnedBonus.x) %>%
select(-contains('.x')) %>%
select(-contains('.y')) %>%
select(username, moneyOwed, moneyPaid, child.firstName, email, everything())
#And write out the updated payment tracker
write.csv(select(new_summary, username,	moneyOwed,	moneyPaid,	child.firstName,	email, numEarnedSessions, earnedBonus),"payment_tracker.csv")
summary <- allInfo %>%
mutate(isOver1 = nVideosFound > 1) %>%
mutate(nameIfNo = ifelse(coded == 'no', shortId, ''))%>%
group_by(username, child.firstName, email, okayToSend.personalCommunication) %>%
dplyr::summarize(numEarnedSessions = n(),
earnedBonus = numEarnedSessions > 11,
numOver1 = sum(isOver1, na.rm = TRUE),
numUnCodedSessions = sum(coded == 'no', na.rm = TRUE),
namesUnCodedSessions = paste0(nameIfNo, collapse = ', '),
numPaidSessions = 0,
paidBonus = FALSE) %>%
filter(numOver1 > 0) %>%
mutate(moneyOwed = (numEarnedSessions)*5 + earnedBonus*5) %>%
mutate(moneyPaid = (numPaidSessions)*5 + paidBonus*5) %>%
select(username, moneyOwed, moneyPaid, child.firstName, email, everything())
#Now read in the tracker sheet and see if anything needs updated! (IE have we paid anyone since running this script last?)
payment_tracker = read.csv("payment_tracker.csv", stringsAsFactors = FALSE) %>%
select(username, moneyOwed, moneyPaid, numEarnedSessions, earnedBonus)
new_summary <- left_join(summary, payment_tracker, by = 'username')
new_summary <- new_summary %>%
mutate(numPaidSessions = ifelse(moneyPaid.y > moneyPaid.x, numEarnedSessions.y, numPaidSessions)) %>%
mutate(paidBonus = ifelse((moneyPaid.y > moneyPaid.x & earnedBonus.y == TRUE), TRUE, paidBonus)) %>%
mutate(moneyPaid = moneyPaid.y) %>%
mutate(numEarnedSessions = numEarnedSessions.x,
moneyOwed = moneyOwed.x - moneyPaid,
earnedBonus = earnedBonus.x) %>%
select(-contains('.x')) %>%
select(-contains('.y')) %>%
select(username, moneyOwed, moneyPaid, child.firstName, email, everything())
#And write out the updated payment tracker
write.csv(select(new_summary, username,	moneyOwed,	moneyPaid,	child.firstName,	email, numEarnedSessions, earnedBonus),"payment_tracker.csv")
topay = summary %>%
filter(numUnCodedSessions > 0)%>%
select(username, numUnCodedSessions, namesUnCodedSessions)
kable(topay)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
tocode = summary %>%
filter(numEarnedSessions > numPaidSessions)%>%
select(username,	moneyOwed,	moneyPaid,	child.firstName,	email, numEarnedSessions, earnedBonus)
kable(tocode)
tocode = summary %>%
filter(numEarnedSessions > numPaidSessions)%>%
select(username,	moneyOwed,	moneyPaid,	child.firstName,	email)
kable(tocode)
payment_tracker = read.csv("payment_tracker.csv", stringsAsFactors = FALSE) %>%
select(username, moneyOwed, moneyPaid, numEarnedSessions, earnedBonus)
summary <- left_join(summary, payment_tracker, by = 'username')
summary <- summary %>%
mutate(numPaidSessions = ifelse(moneyPaid.y > moneyPaid.x, numEarnedSessions.y, numPaidSessions)) %>%
mutate(paidBonus = ifelse((moneyPaid.y > moneyPaid.x & earnedBonus.y == TRUE), TRUE, paidBonus)) %>%
mutate(moneyPaid = moneyPaid.y) %>%
mutate(numEarnedSessions = numEarnedSessions.x,
moneyOwed = moneyOwed.x - moneyPaid,
earnedBonus = earnedBonus.x) %>%
select(-contains('.x')) %>%
select(-contains('.y')) %>%
select(username, moneyOwed, moneyPaid, child.firstName, email, everything())
View(summary)
tocode = summary %>%
#filter(numEarnedSessions > numPaidSessions)%>%
select(username,	moneyOwed,	moneyPaid,	child.firstName,	email)
kable(tocode)
tocode = summary %>%
filter(numEarnedSessions > numPaidSessions)%>%
select(username,	moneyOwed,	moneyPaid,	child.firstName,	email)
kable(tocode)
tocode = summary %>%
filter(numEarnedSessions > numPaidSessions)%>%
select(username,	parent.firstName, moneyOwed,	moneyPaid,	child.firstName,	email)
accountsprod <- read.csv("/Users/mekline/Projects/LookitVideo_Old/accountsprod_583c892ec0d9d70082123d94.csv", stringsAsFactors = FALSE)
print("read in accountsprod_583c892ec0d9d70082123d94.csv")
sessions <- read.csv("/Users/mekline/Projects/LookitVideo_Old/583c892ec0d9d70082123d94_Kim.csv", stringsAsFactors = FALSE)
sessions2 <- read.csv("/Users/mekline/Projects/LookitVideo_Old/57bc591dc0d9d70055f775db_Kim.csv", stringsAsFactors = FALSE)
accountsprod <- accountsprod %>%
select(username, name, email, okayToSend.personalCommunication, demographicsHowDidYouHear, demographicsLanguagesSpokenAtHome, name) %>%
mutate(parent.firstName = name)
sessions <- sessions %>%
select(shortId, username, child, child.firstName, child.gender, withdrawn, consent, usable, nVideosFound, allcoders, coded) %>%
mutate(origin = '583c') %>%
filter(consent == 'yes')
sessions2 <- sessions2 %>%
select(shortId, username, child, child.firstName, child.gender, withdrawn, consent, usable, nVideosFound, allcoders, coded) %>%
mutate(origin = '57bc') %>%
filter(consent == 'yes')
sessions <- bind_rows(sessions, sessions2)
allInfo <- left_join(accountsprod, sessions, by=c('username'))
allInfo$parent.firstName
summary <- allInfo %>%
mutate(isOver1 = nVideosFound > 1) %>%
mutate(nameIfNo = ifelse(coded == 'no', shortId, ''))%>%
group_by(username, parent.firstName, child.firstName, email, okayToSend.personalCommunication) %>%
dplyr::summarize(numEarnedSessions = n(),
earnedBonus = numEarnedSessions > 11,
numOver1 = sum(isOver1, na.rm = TRUE),
numUnCodedSessions = sum(coded == 'no', na.rm = TRUE),
namesUnCodedSessions = paste0(nameIfNo, collapse = ', '),
numPaidSessions = 0,
paidBonus = FALSE) %>%
filter(numOver1 > 0) %>%
mutate(moneyOwed = (numEarnedSessions)*5 + earnedBonus*5) %>%
mutate(moneyPaid = (numPaidSessions)*5 + paidBonus*5) %>%
select(username, moneyOwed, moneyPaid, child.firstName, email, everything())
#Now read in the tracker sheet and see if anything needs updated! (IE have we paid anyone since running this script last?)
payment_tracker = read.csv("payment_tracker.csv", stringsAsFactors = FALSE) %>%
select(username, moneyOwed, moneyPaid, numEarnedSessions, earnedBonus)
summary <- left_join(summary, payment_tracker, by = 'username')
summary <- summary %>%
mutate(numPaidSessions = ifelse(moneyPaid.y > moneyPaid.x, numEarnedSessions.y, numPaidSessions)) %>%
mutate(paidBonus = ifelse((moneyPaid.y > moneyPaid.x & earnedBonus.y == TRUE), TRUE, paidBonus)) %>%
mutate(moneyPaid = moneyPaid.y) %>%
mutate(numEarnedSessions = numEarnedSessions.x,
moneyOwed = moneyOwed.x - moneyPaid,
earnedBonus = earnedBonus.x) %>%
select(-contains('.x')) %>%
select(-contains('.y')) %>%
select(username, moneyOwed, moneyPaid, child.firstName, email, everything())
#And write out the updated payment tracker
write.csv(select(summary, username,	moneyOwed,	moneyPaid,	child.firstName,	email, numEarnedSessions, earnedBonus),"payment_tracker.csv")
tocode = summary %>%
filter(numEarnedSessions > numPaidSessions)%>%
select(username,	parent.firstName, moneyOwed,	moneyPaid,	child.firstName,	email)
kable(tocode)
library(here)
library(tidyr)
library(dplyr)
library(stringr)
library(tibble)
#library(vioplot)
#library(corrgram)
library(Hmisc)
library(car)
library(nlme) # allows use of weights
library(lme4) # newer/maintained, allows logistic regression
library(lsmeans)
library(MuMIn)
library(ids)
require(glmmTMB) # For fitting beta distributions
pilotdata <- read.csv(here("raw_data","pilot_included_trials.csv"), stringsAsFactors = FALSE)
#NOTE: Won't work off of Melissa's laptop for privacy, use the following instead
#pilotdata <- read.csv(here("raw_data","salted_pilot_included_trials.csv"), stringsAsFactors = FALSE)
head(pilotdata)
#Columns that may include PII
#-Birthday
#-Test date + age
#-Name/email strings
head(dplyr::select(pilotdata, child.profileId, ageRegistration, ageExitsurvey))
#Good news! Only child.profileId is a possible danger (participants could freely choose a name, and often
#used some or all of their real name); dataset has age but is fully date free
#Add human-friendly Ids in place of those
set.seed(25432)
pilotdata <- pilotdata %>%
group_by(child.profileId) %>%
mutate(child.proquint = proquint())%>%
ungroup()%>%
dplyr::select(-c(child.profileId,X))
write.csv(pilotdata, here("raw_data","salted_pilot_included_trials.csv"))
LT_means_per_child_per_trial <- pilotdata %>%
group_by(shortId, trialnum) %>%
summarise(TLT = mean(totalLT))
g <- ggplot(LT_means_per_child_per_trial, aes(y = TLT, x = trialnum)) +
geom_jitter(alpha = 0.1) +
geom_smooth(method = "lm")+
ylab('Looking time in seconds')+
xlab('Trial number')
print(g)
ggplot(data = pilotdata, aes(x=fracLeft)) +
geom_histogram(bins = 20)
ggplot(data = pilotdata, aes(x=fracLeft)) +
geom_histogram(bins = 20) +
facet_wrap(~event)
pilotdata_nc <- pilotdata %>%
filter(event != "calibration")
ggplot(data = pilotdata_nc, aes(x=fracLeft)) +
geom_histogram(bins = 20) +
facet_wrap(~event)
#Beta distributions hate exact 0/1 values, transform them away.
convert01 <- function(y) {
n <- length(y)
y2 <- (y*(n-1) + 0.5)/n
return(y2)
}
pilotdata <- pilotdata %>%
mutate(fracLeft_tr = convert01(fracLeft))
fitbeta1 <- glmmTMB(fracLeft_tr ~ 1, data = pilotdata, family = beta_family(link = "logit"))
summary(fitbeta1)
fitbeta2 <- glmmTMB(fracLeft_tr ~ 1 + (1|shortId) + (1|stimuli), data = pilotdata, family = beta_family(link = "logit"))
summary(fitbeta2)
fitbeta3 <- glmmTMB(fracLeft_tr ~ ageRegistration*trialnum + (1|shortId) + (1|stimuli), data = pilotdata, family = beta_family(link = "logit"))
summary(fitbeta3)
taskmodel = "ageRegistration*trialnum + (1|shortId) + (1|stimuli)"
fitbeta3 <- glmmTMB(as.formula(paste(fracLeft_tr," ~ ", taskmodel)), data = pilotdata, family = beta_family(link = "logit"))
taskmodel = "ageRegistration*trialnum + (1|shortId) + (1|stimuli)"
fitbeta3 <- glmmTMB(as.formula(paste("fracLeft_tr ~ ", taskmodel)), data = pilotdata, family = beta_family(link = "logit"))
summary(fitbeta3)
names(pilotdata)
pilotdata$lessExpectedLeft
p <- pilotdata %>%
filter(is.na(lessExpectedLeft))
unique(p$comparison)
unique(p$event)
same_cal <- pilotdata %>%
filter(event == "same"|event == "calibration")
unqiue(same_cal$event)
unique(same_cal$event)
physics_events <- pilotdata %>%
filter(event != "same" & event != "calibration")
unique(physics_events$event)
fitbeta4 <- glmmTMB(as.formula(paste("fracLeft_tr ~ ", "lessExpectedLeft + ", taskmodel)), data = pilotdata, family = beta_family(link = "logit"))
summary(fitbeta4)
fitbeta4 <- glmmTMB(as.formula(paste("fracLeft_tr ~ ", "lessExpectedLeft + ", taskmodel)), data = physics_events, family = beta_family(link = "logit"))
summary(fitbeta4)
summary(fitbeta3)
unique(physics_events$event)
surprisalmodel = paste("lessExpectedLeft + ", taskmodel)
fitbeta4 <- glmmTMB(as.formula(paste("fracLeft_tr ~ ", surprisalmodel)), data = physics_events, family = beta_family(link = "logit"))
summary(fitbeta4)
unique(physics_events$event)
fitbeta_salience <- glmmTMB(as.formula(paste("fracLeft_tr ~ ", surprisalmodel)), data = salience, family = beta_family(link = "logit"))
#gravity
#table (New for main dataset)
toss <- filter(physics_events, event == "toss")
ramp <- filter(physics_events, event == "ramp")
#inertia
#stop (New for main dataset)
#reverse (New for main dataset)
#support
fall <- filter(physics_events, event == "fall")
stay <- filter(physics_events, event == "stay")
#control
salience <- filter(physics_events, event == "salience")
surprisal_x_age_model = paste("lessExpectedLeft*ageRegistration + ", taskmodel)
fitbeta_salience <- glmmTMB(as.formula(paste("fracLeft_tr ~ ", surprisalmodel)), data = salience, family = beta_family(link = "logit"))
summary(fitbeta_salience)
dumb <- fracLeft_tr ~ ageRegistration, data = salience, family = beta_family(link = "logit"))
dumb <- glmmTMB(fracLeft_tr ~ ageRegistration, data = salience, family = beta_family(link = "logit"))
dumb2 <- glmmTMB(fracLeft_tr ~ ageRegistration + ageRegistration, data = salience, family = beta_family(link = "logit"))
summary(dumb)
summary(dumb2)
#Visualize (Plotting fracLessExpected)
means_per_child <- salience %>%
group_by(shortId, comparison) %>% #Would need to add session as well
summarise(fLE = mean(fracLessExpected), age = ageRegistration)
#Visualize (Plotting fracLessExpected)
means_per_child <- salience %>%
group_by(shortId, comparison) %>% #Would need to add session as well
summarise(fLE = mean(fracLessExpected), age = mean(ageRegistration))
g <- ggplot(stay_means_per_child_per_comparison, aes(y = fLE, x = age)) +
geom_jitter(alpha = 0.1) +
geom_smooth(method = "lm")+
geom_hline(yintercept=0.5, linetype = 'dashed')+
facet_wrap(~comparison) +
ggtitle('Stay')
#Visualize (Plotting fracLessExpected)
means_per_child <- salience %>%
group_by(shortId, comparison) %>% #Would need to add session as well
summarise(fLE = mean(fracLessExpected), age = mean(ageRegistration))
g <- ggplot(means_per_child, aes(y = fLE, x = age)) +
geom_jitter(alpha = 0.1) +
geom_smooth(method = "lm")+
geom_hline(yintercept=0.5, linetype = 'dashed')+
facet_wrap(~comparison) +
ggtitle('Stay')
#Model
fitbeta_salience <- glmmTMB(as.formula(paste("fracLeft_tr ~ ", surprisalmodel)), data = salience, family = beta_family(link = "logit"))
summary(fitbeta_salience)
#Value at 12 months?
g
help(predict)
seq(0, 6, 1)
g
predict_age_at = seq(4, 15, 1)
predict_age_at = seq(4, 15, 1)
predict_fracLessExpected <- predict(fitbeta_salience, list(ageRegistration = predict_age_at),type="response")
fitbeta_salience <- glmmTMB(as.formula(paste("fracLeft_tr ~ ", surprisalmodel)), data = salience, family = beta_family(link = "logit"))
summary(fitbeta_salience)
predict_age_at = seq(4, 15, 1)
predict_fracLessExpected <- predict(fitbeta_salience, list(ageRegistration = predict_age_at),type="response")
surprisal_x_age_model = paste("lessExpectedLeft*ageRegistration + ", taskmodel)
library(here)
library(tidyr)
library(dplyr)
library(stringr)
library(tibble)
#library(vioplot)
#library(corrgram)
library(Hmisc)
library(car)
library(nlme) # allows use of weights
library(lme4) # newer/maintained, allows logistic regression
library(lsmeans)
library(MuMIn)
library(ids)
require(glmmTMB) # For fitting beta distributions
pilotdata <- read.csv(here("raw_data","pilot_included_trials.csv"), stringsAsFactors = FALSE)
#NOTE: Won't work off of Melissa's laptop for privacy, use the following instead
#pilotdata <- read.csv(here("raw_data","salted_pilot_included_trials.csv"), stringsAsFactors = FALSE)
# Useful resources
# https://www.theanalysisfactor.com/r-glm-model-fit/
head(pilotdata)
#Columns that may include PII
#-Birthday
#-Test date + age
#-Name/email strings
head(dplyr::select(pilotdata, child.profileId, ageRegistration, ageExitsurvey))
#Good news! Only child.profileId is a possible danger (participants could freely choose a name, and often
#used some or all of their real name); dataset has age but is fully date free
#Add human-friendly Ids in place of those
set.seed(25432)
pilotdata <- pilotdata %>%
group_by(child.profileId) %>%
mutate(child.proquint = proquint())%>%
ungroup()%>%
dplyr::select(-c(child.profileId,X))
write.csv(pilotdata, here("raw_data","salted_pilot_included_trials.csv"))
LT_means_per_child_per_trial <- pilotdata %>%
group_by(shortId, trialnum) %>%
summarise(TLT = mean(totalLT))
g <- ggplot(LT_means_per_child_per_trial, aes(y = TLT, x = trialnum)) +
geom_jitter(alpha = 0.1) +
geom_smooth(method = "lm")+
ylab('Looking time in seconds')+
xlab('Trial number')
print(g)
ggplot(data = pilotdata, aes(x=fracLeft)) +
geom_histogram(bins = 20)
ggplot(data = pilotdata, aes(x=fracLeft)) +
geom_histogram(bins = 20) +
facet_wrap(~event)
pilotdata_nc <- pilotdata %>%
filter(event != "calibration")
ggplot(data = pilotdata_nc, aes(x=fracLeft)) +
geom_histogram(bins = 20) +
facet_wrap(~event)
#Beta distributions hate exact 0/1 values, transform them away.
convert01 <- function(y) {
n <- length(y)
y2 <- (y*(n-1) + 0.5)/n
return(y2)
}
pilotdata <- pilotdata %>%
mutate(fracLeft_tr = convert01(fracLeft))
fitbeta1 <- glmmTMB(fracLeft_tr ~ 1, data = pilotdata, family = beta_family(link = "logit"))
summary(fitbeta1)
fitbeta2 <- glmmTMB(fracLeft_tr ~ 1 + (1|shortId) + (1|stimuli), data = pilotdata, family = beta_family(link = "logit"))
summary(fitbeta2)
fitbeta3 <- glmmTMB(fracLeft_tr ~ ageRegistration*trialnum + (1|shortId) + (1|stimuli), data = pilotdata, family = beta_family(link = "logit"))
summary(fitbeta3)
taskmodel = "ageRegistration*trialnum + (1|shortId) + (1|stimuli)"
#(Checking it works)
fitbeta3 <- glmmTMB(as.formula(paste("fracLeft_tr ~ ", taskmodel)), data = pilotdata, family = beta_family(link = "logit"))
summary(fitbeta3)
same_cal <- pilotdata %>%
filter(event == "same"|event == "calibration")
physics_events <- pilotdata %>%
filter(event != "same" & event != "calibration")
surprisalmodel = paste("lessExpectedLeft + ", taskmodel)
fitbeta4 <- glmmTMB(as.formula(paste("fracLeft_tr ~ ", surprisalmodel)), data = physics_events, family = beta_family(link = "logit"))
summary(fitbeta4)
#gravity
#table (New for main dataset)
toss <- filter(physics_events, event == "toss")
ramp <- filter(physics_events, event == "ramp")
#inertia
#stop (New for main dataset)
#reverse (New for main dataset)
#support
fall <- filter(physics_events, event == "fall")
stay <- filter(physics_events, event == "stay")
#control
salience <- filter(physics_events, event == "salience")
surprisal_x_age_model = paste("lessExpectedLeft*ageRegistration + ", taskmodel)
means_per_child <- salience %>%
group_by(shortId, comparison) %>% #Would need to add session as well
summarise(fLE = mean(fracLessExpected), age = mean(ageRegistration))
g <- ggplot(means_per_child, aes(y = fLE, x = age)) +
geom_jitter(alpha = 0.1) +
geom_smooth(method = "lm")+
geom_hline(yintercept=0.5, linetype = 'dashed')+
facet_wrap(~comparison) +
ggtitle('Stay')
g
fitbeta_salience <- glmmTMB(as.formula(paste("fracLeft_tr ~ ", surprisalmodel)), data = salience, family = beta_family(link = "logit"))
summary(fitbeta_salience)
fitbeta_salience$modelInfo
predict_age_at = seq(4, 15, 1)
predict_fracLessExpected <- predict(fitbeta_salience, list(ageRegistration = predict_age_at),type="response")
predict_fracLessExpected <- predict(fitbeta_salience, list(ageRegistration = predict_age_at))
predict_age_at = seq(4, 15, 1)
predict_fracLessExpected <- predict(fitbeta_salience, newdata = salience, list(ageRegistration = predict_age_at),type="response")
predict_age_at
predict_fracLessExpected <- predict.glm(fitbeta_salience, newdata = salience, list(ageRegistration = predict_age_at),type="response")
predict_fracLessExpected <- predict.glm(fitbeta_salience, newdata = salience,type="response")
help("predict.glm")
data.frame(ageRegistration = predict_age_at)
predict_fracLessExpected <- predict.glm(fitbeta_salience, newdata = data.frame(ageRegistration = predict_age_at),type="response")
predict_EL = factor(TRUE, FALSE)
predict_fracLessExpected <- predict.glm(fitbeta_salience, data.frame(ageRegistration = predict_age_at, lessExpectedLeft = predict_EL),type="response")
predict_trialnum = seq(1, 24, 1)
predict_fracLeft <- predict.glm(fitbeta_salience, data.frame(ageRegistration = predict_age_at, lessExpectedLeft = predict_EL, trialnum = predict_trialnum),type="response")
predict_EL = c(TRUE, FALSE)
predict_fracLeft <- predict.glm(fitbeta_salience, data.frame(ageRegistration = predict_age_at, lessExpectedLeft = predict_EL, trialnum = predict_trialnum),type="response")
predict_fracLeft <- predict.glm(fitbeta_salience, data.frame(ageRegistration = predict_age_at, lessExpectedLeft = mean(salience$lessExpectedLeft), trialnum = mean(salience$trialnum)),type="response")
predict_fracLeft <- predict.glm(fitbeta_salience, data.frame(ageRegistration = predict_age_at, lessExpectedLeft = predict_EL, trialnum = predict_trialnum,type="response")
1
predict_fracLeft <- predict.glm(fitbeta_salience,
data.frame(ageRegistration = predict_age_at,
lessExpectedLeft = predict_EL,
trialnum = predict_trialnum),
type="response")
predict_fracLeft <- predict(fitbeta_salience,
data.frame(ageRegistration = predict_age_at,
lessExpectedLeft = predict_EL,
trialnum = predict_trialnum),
type="response")
predict_age_at = seq(4, 15, 1)
predict_EL = c(TRUE, FALSE)
predict_trialnum = seq(1, 24, 1)
predict_shortId = unique(salience$shortId)
predict_stimuli = unique(salience$stimuli)
predict_fracLeft <- predict(fitbeta_salience,
data.frame(ageRegistration = predict_age_at,
lessExpectedLeft = predict_EL,
trialnum = predict_trialnum,
shortId = predict_shortId,
stimuli = predict_stimuli),
type="response")
predict(fitbeta_salience)
predict(fitbeta_salience, type = response)
predict(fitbeta_salience, type = "response")
fitted(fitbeta_salience, type = "response")
foo = predict(fitbeta_salience, type = response)
foo = predict(fitbeta_salience, type = "response")
foo
length(foo)
length(salience)
predict_age_at = seq(4,15,1)
predict(fitbeta_salience, newdata = data.frame(ageRegistration = predict_age_at), type = "response")
plot(fitbeat_salience)
plot(fitbeta_salience)
version
